@startuml

class Actor {
  # Actor(int, int, Transform, Texture): 
  - health: int
  - isAlive: boolean
   isAlive: boolean
   health: int
}
class Coin {
  + Coin(Transform): 
  - objectScore: int
   objectScore: int
}
class CoinTest {
  + CoinTest(): 
}
class CollisionBox {
  + CollisionBox(Transform): 
   position: Vector2
}
class CollisionBoxTest {
  + CollisionBoxTest(): 
}
interface ControllableWorldModel << interface >> {
   gameState: GameState
   movementSpeed: int
   movement: String
}
class ControllerTest {
  + ControllerTest(): 
}
class Enemy {
  + Enemy(int, int, int, int, Transform): 
  - objectScore: int
  - damage: int
   objectScore: int
   damage: int
}
class EnemyFactory {
  + EnemyFactory(): 
}
class EnemyFactoryTest {
  + EnemyFactoryTest(): 
}
class EnemyTest {
  + EnemyTest(): 
}
class ExampleIT {
  + ExampleIT(): 
}
class ExampleTest {
  + ExampleTest(): 
}
class FixedObject {
  + FixedObject(Transform, Texture): 
}
class FixedObjectTest {
  + FixedObjectTest(): 
}
class GameObject {
  + GameObject(Transform, Texture): 
  - texture: Texture
  - collisionBox: CollisionBox
  - transform: Transform
   collisionBox: CollisionBox
   transform: Transform
   texture: Texture
}
enum GameState << enumeration >> {
  - GameState(): 
}
class GameStateTest {
  + GameStateTest(): 
}
class Item {
  + Item(Transform, Texture): 
}
class Main {
  + Main(): 
}
class MobileObject {
  # MobileObject(int, Transform, Texture): 
  - movementSpeed: int
   movementSpeed: int
}
class MobileObjectTest {
  + MobileObjectTest(): 
}
class ModelTest {
  + ModelTest(): 
}
class ParallaxBackground {
  + ParallaxBackground(): 
}
class Player {
  + Player(int, int): 
   movementSpeed: int
}
class PlayerController {
  + PlayerController(ControllableWorldModel): 
}
class PlayerTest {
  + PlayerTest(): 
}
class PositionTest {
  + PositionTest(): 
}
interface Scorable << interface >> {
   objectScore: int
}
class Transform {
  + Transform(Vector2, Vector2): 
  ~ size: Vector2
   pos: Vector2
   size: Vector2
}
interface ViewableObject << interface >> {
   collisionBox: CollisionBox
   transform: Transform
   texture: Texture
}
interface ViewableWorldModel << interface >> {
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   coinCounter: int
   totalScore: int
   movementSpeed: int
   gameState: GameState
   playerHealth: int
}
entity WorldBoard << record >> {
  + WorldBoard(int, int): 
}
class WorldBoardTest {
  ~ WorldBoardTest(): 
}
class WorldModel {
  + WorldModel(WorldBoard): 
  - gameState: GameState
  - objectList: ArrayList<GameObject>
  - totalScore: int
  - coinCounter: int
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   coinCounter: int
   totalScore: int
   movementSpeed: int
   gameState: GameState
   movement: String
   playerHealth: int
}
class WorldView {
  + WorldView(ViewableWorldModel, Viewport): 
}
interface node21 as "package-info" << interface >>
interface node22 as "package-info" << interface >>
interface node31 as "package-info" << interface >>

Actor                   -[#000082,plain]-^  MobileObject           
Coin                    -[#000082,plain]-^  Item                   
Coin                    -[#008200,dashed]-^  Scorable               
ControllerTest         "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "playerController\n1" PlayerController       
Enemy                   -[#000082,plain]-^  Actor                  
Enemy                   -[#008200,dashed]-^  Scorable               
FixedObject             -[#000082,plain]-^  GameObject             
GameObject             "1" *-[#595959,plain]-> "collisionBox\n1" CollisionBox           
GameObject             "1" *-[#595959,plain]-> "transform\n1" Transform              
GameObject              -[#008200,dashed]-^  ViewableObject         
Item                    -[#000082,plain]-^  FixedObject            
MobileObject            -[#000082,plain]-^  GameObject             
ModelTest              "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
Player                  -[#000082,plain]-^  Actor                  
Player                 "1" *-[#595959,plain]-> "PLAYER_TRANSFORM\n1" Transform              
PlayerController       "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
WorldModel              -[#008200,dashed]-^  ControllableWorldModel 
WorldModel             "1" *-[#595959,plain]-> "objectList\n*" GameObject             
WorldModel             "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldModel             "1" *-[#595959,plain]-> "player\n1" Player                 
WorldModel             "1" *-[#595959,plain]-> "playerController\n1" PlayerController       
WorldModel              -[#008200,dashed]-^  ViewableWorldModel     
WorldModel             "1" *-[#595959,plain]-> "board\n1" WorldBoard             
WorldModel             "1" *-[#595959,plain]-> "worldView\n1" WorldView              
WorldView              "1" *-[#595959,plain]-> "parallaxBackground\n1" ParallaxBackground     
WorldView              "1" *-[#595959,plain]-> "model\n1" ViewableWorldModel     
@enduml
