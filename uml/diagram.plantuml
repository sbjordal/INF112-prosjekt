@startuml

class Actor {
  # Actor(int, int, Transform, Texture): 
  - isAlive: boolean
  - lives: int
   lives: int
   isAlive: boolean
}
class Coin {
  + Coin(Transform): 
  - objectScore: int
   objectScore: int
}
class CoinTest {
  + CoinTest(): 
}
class CollisionBox {
  + CollisionBox(Transform): 
   position: Vector2
}
class CollisionBoxTest {
  + CollisionBoxTest(): 
}
interface ControllableWorldModel << interface >> {
   gameState: GameState
   movingLeft: boolean
   movingRight: boolean
   movementSpeed: int
}
class Controller {
  + Controller(ControllableWorldModel): 
}
class ControllerTest {
  + ControllerTest(): 
}
class Enemy {
  + Enemy(int, int, int, Transform): 
  - objectScore: int
  - damage: int
   damage: int
   objectScore: int
}
class EnemyFactory {
  + EnemyFactory(): 
}
class EnemyFactoryTest {
  + EnemyFactoryTest(): 
}
class EnemyTest {
  + EnemyTest(): 
}
enum EnemyType << enumeration >> {
  - EnemyType(int, int, int, int, float, float): 
}
class ExampleIT {
  + ExampleIT(): 
}
class ExampleTest {
  + ExampleTest(): 
}
class FixedObject {
  + FixedObject(Transform, Texture): 
}
class GameObject {
  + GameObject(Transform, Texture): 
  - texture: Texture
  - transform: Transform
  - collisionBox: CollisionBox
   currentFrame: TextureRegion
   texture: Texture
   collisionBox: CollisionBox
   size: Vector2
   transform: Transform
}
enum GameState << enumeration >> {
  - GameState(): 
}
class GameStateTest {
  + GameStateTest(): 
}
class Item {
  + Item(Transform, Texture): 
}
class ItemFactory {
  + ItemFactory(): 
}
class ItemFactoryTest {
  + ItemFactoryTest(): 
}
class Main {
  + Main(): 
}
class MobileObject {
  # MobileObject(int, Transform, Texture): 
  - verticalVelocity: int
  - movementDirection: int
  - movementSpeed: int
   movementDirection: int
   verticalVelocity: int
   movementSpeed: int
}
class MobileObjectTest {
  + MobileObjectTest(): 
}
class ModelTest {
  + ModelTest(): 
}
class Mushroom {
  + Mushroom(Transform): 
}
class MushroomTest {
  + MushroomTest(): 
}
class ParallaxBackground {
  + ParallaxBackground(): 
}
class Player {
  + Player(int, int, Transform): 
  - hasPowerUp: boolean
   currentFrame: TextureRegion
   hasPowerUp: boolean
}
class PlayerAnimation {
  + PlayerAnimation(): 
}
class PlayerControllerTest {
  + PlayerControllerTest(): 
}
class PlayerTest {
  + PlayerTest(): 
}
class PositionTest {
  + PositionTest(): 
}
interface Scorable << interface >> {
   objectScore: int
}
class SoundHandler {
  + SoundHandler(): 
}
class SoundHandlerTest {
  + SoundHandlerTest(): 
}
class Transform {
  + Transform(Vector2, Vector2): 
  ~ size: Vector2
   pos: Vector2
   size: Vector2
}
interface ViewableObject << interface >> {
   currentFrame: TextureRegion
   texture: Texture
   collisionBox: CollisionBox
   transform: Transform
}
interface ViewableWorldModel << interface >> {
   coinCounter: int
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   countDown: int
   gameState: GameState
   totalScore: int
   playerLives: int
   movementDirection: int
   movementSpeed: int
}
entity WorldBoard << record >> {
  + WorldBoard(int, int): 
}
class WorldBoardTest {
  + WorldBoardTest(): 
}
class WorldModel {
  + WorldModel(WorldBoard): 
  - gameState: GameState
  - countDown: int
  - isMovingRight: boolean
  - coinCounter: int
  - totalScore: int
  - isMovingLeft: boolean
  - objectList: ArrayList<GameObject>
   touchingGround: boolean
   isMovingRight: boolean
   coinCounter: int
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   countDown: int
   isMovingLeft: boolean
   gameState: GameState
   totalScore: int
   playerLives: int
   movementDirection: int
   movementSpeed: int
}
class WorldModelTest {
  + WorldModelTest(): 
}
class WorldView {
  + WorldView(ViewableWorldModel, Viewport): 
}
interface node29 as "package-info" << interface >>
interface node39 as "package-info" << interface >>
interface node40 as "package-info" << interface >>

Actor                   -[#000082,plain]-^  MobileObject           
Coin                    -[#000082,plain]-^  Item                   
Coin                    -[#008200,dashed]-^  Scorable               
CoinTest                -[#595959,dashed]->  Coin                   : "«create»"
CoinTest                -[#595959,dashed]->  Transform              : "«create»"
Controller             "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest          -[#595959,dashed]->  Controller             : "«create»"
ControllerTest         "1" *-[#595959,plain]-> "controller\n1" Controller             
Enemy                   -[#000082,plain]-^  Actor                  
Enemy                   -[#008200,dashed]-^  Scorable               
EnemyFactory            -[#595959,dashed]->  Enemy                  : "«create»"
EnemyFactory            -[#595959,dashed]->  Transform              : "«create»"
FixedObject             -[#000082,plain]-^  GameObject             
GameObject             "1" *-[#595959,plain]-> "collisionBox\n1" CollisionBox           
GameObject             "1" *-[#595959,plain]-> "transform\n1" Transform              
GameObject              -[#008200,dashed]-^  ViewableObject         
Item                    -[#000082,plain]-^  FixedObject            
ItemFactory             -[#595959,dashed]->  Coin                   : "«create»"
ItemFactory             -[#595959,dashed]->  Mushroom               : "«create»"
ItemFactory             -[#595959,dashed]->  Transform              : "«create»"
MobileObject            -[#000082,plain]-^  GameObject             
ModelTest               -[#595959,dashed]->  WorldBoard             : "«create»"
ModelTest              "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
Mushroom                -[#000082,plain]-^  Item                   
Player                  -[#000082,plain]-^  Actor                  
PlayerControllerTest   "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
PlayerTest              -[#595959,dashed]->  Player                 : "«create»"
PlayerTest             "1" *-[#595959,plain]-> "player\n1" Player                 
PlayerTest              -[#595959,dashed]->  Transform              : "«create»"
PlayerTest             "1" *-[#595959,plain]-> "transform\n1" Transform              
WorldBoardTest          -[#595959,dashed]->  WorldBoard             : "«create»"
WorldModel              -[#008200,dashed]-^  ControllableWorldModel 
WorldModel             "1" *-[#595959,plain]-> "controller\n1" Controller             
WorldModel             "1" *-[#595959,plain]-> "objectList\n*" GameObject             
WorldModel             "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldModel             "1" *-[#595959,plain]-> "player\n1" Player                 
WorldModel             "1" *-[#595959,plain]-> "soundHandler\n1" SoundHandler           
WorldModel              -[#008200,dashed]-^  ViewableWorldModel     
WorldModel             "1" *-[#595959,plain]-> "board\n1" WorldBoard             
WorldModel             "1" *-[#595959,plain]-> "worldView\n1" WorldView              
WorldModelTest          -[#595959,dashed]->  WorldModel             : "«create»"
WorldModelTest         "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
WorldView              "1" *-[#595959,plain]-> "parallaxBackground\n1" ParallaxBackground     
WorldView              "1" *-[#595959,plain]-> "model\n1" ViewableWorldModel     
@enduml
