@startuml

class Actor {
  # Actor(int, int, Transform): 
  - lives: int
  - isAlive: boolean
  # damage: int
   isAlive: boolean
   lives: int
   damage: int
}
class Banana {
  + Banana(Transform): 
}
class BananaTest {
  + BananaTest(): 
}
class Coin {
  + Coin(Transform): 
  - objectScore: int
   objectScore: int
}
class CoinTest {
  + CoinTest(): 
}
class CollisionBox {
  + CollisionBox(Transform): 
   position: Vector2
}
class CollisionBoxTest {
  + CollisionBoxTest(): 
}
interface ControllableWorldModel << interface >> {
   gameState: GameState
   jumping: boolean
   movementSpeed: int
   movingRight: boolean
   movingLeft: boolean
}
class Controller {
  + Controller(ControllableWorldModel): 
}
class ControllerTest {
  + ControllerTest(): 
}
class Enemy {
  + Enemy(int, int, int, int, Transform): 
  - objectScore: int
   objectScore: int
   readyToCollide: boolean
}
class EnemyFactory {
  + EnemyFactory(): 
}
class EnemyFactoryTest {
  + EnemyFactoryTest(): 
}
class EnemyTest {
  + EnemyTest(): 
}
enum EnemyType << enumeration >> {
  - EnemyType(int, int, int, int, float, float): 
}
class FixedObject {
  + FixedObject(Transform): 
}
class GameObject {
  + GameObject(Transform): 
  - transform: Transform
  - collisionBox: CollisionBox
   collisionBox: CollisionBox
   size: Vector2
   transform: Transform
}
enum GameState << enumeration >> {
  - GameState(): 
}
class GameStateTest {
  + GameStateTest(): 
}
class Item {
  + Item(Transform): 
}
class ItemFactory {
  + ItemFactory(): 
}
class ItemFactoryTest {
  + ItemFactoryTest(): 
}
class Leopard {
  + Leopard(int, int, int, int, Transform): 
}
class LevelManager {
  + LevelManager(): 
}
class Main {
  + Main(): 
}
class MobileObject {
  # MobileObject(int, Transform): 
  - movementSpeed: int
  - verticalVelocity: int
  - movementDirection: int
   movementDirection: int
   verticalVelocity: int
   movementSpeed: int
}
class MobileObjectTest {
  + MobileObjectTest(): 
}
class ModelTest {
  + ModelTest(): 
}
class MushroomTest {
  + MushroomTest(): 
}
class ParallaxBackground {
  + ParallaxBackground(int): 
}
class Player {
  + Player(int, int, Transform): 
  - hasPowerUp: boolean
   hasPowerUp: boolean
}
class PlayerAnimation {
  + PlayerAnimation(): 
}
class PlayerTest {
  ~ PlayerTest(): 
}
class PositionTest {
  + PositionTest(): 
}
interface Scorable << interface >> {
   objectScore: int
}
class Snail {
  + Snail(int, int, int, int, Transform): 
}
class SoundHandler {
  + SoundHandler(): 
}
class SoundHandlerTest {
  + SoundHandlerTest(): 
}
class Star {
  + Star(Transform): 
}
class Transform {
  + Transform(Vector2, Vector2): 
  ~ size: Vector2
   pos: Vector2
   size: Vector2
}
class ViewTest {
  + ViewTest(): 
}
interface ViewableObject << interface >> {
   collisionBox: CollisionBox
   transform: Transform
}
interface ViewableWorldModel << interface >> {
   levelWidth: int
   totalScore: int
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   movementSpeed: int
   movementDirection: int
   countDown: int
   gameState: GameState
   coinCounter: int
   playerLives: int
   boardWidth: int
}
entity WorldBoard << record >> {
  + WorldBoard(int, int): 
}
class WorldBoardTest {
  ~ WorldBoardTest(): 
}
class WorldModel {
  + WorldModel(int, int): 
  + LEVEL_WIDTH: int
  - objectList: ArrayList<GameObject>
  - coinCounter: int
  - gameState: GameState
  - totalScore: int
  - isMovingLeft: boolean
  - isJumping: boolean
  - countDown: int
  - isMovingRight: boolean
   touchingGround: boolean
   isJumping: boolean
   totalScore: int
   movementSpeed: int
   movementDirection: int
   LEVEL_WIDTH: int
   boardWidth: int
   isMovingRight: boolean
   objectList: List<ViewableObject>
   viewablePlayer: ViewableObject
   countDown: int
   gameState: GameState
   coinCounter: int
   playerLives: int
   isMovingLeft: boolean
}
class WorldModelTest {
  + WorldModelTest(): 
}
class WorldView {
  + WorldView(ViewableWorldModel, int, int): 
   viewportLeftX: float
}

Actor                   -[#000082,plain]-^  MobileObject           
Banana                  -[#000082,plain]-^  Item                   
Coin                    -[#000082,plain]-^  Item                   
Coin                    -[#008200,dashed]-^  Scorable               
Controller             "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "controller\n1" Controller             
Enemy                   -[#000082,plain]-^  Actor                  
Enemy                   -[#008200,dashed]-^  Scorable               
FixedObject             -[#000082,plain]-^  GameObject             
GameObject             "1" *-[#595959,plain]-> "collisionBox\n1" CollisionBox           
GameObject             "1" *-[#595959,plain]-> "transform\n1" Transform              
GameObject              -[#008200,dashed]-^  ViewableObject         
Item                    -[#000082,plain]-^  FixedObject            
Leopard                 -[#000082,plain]-^  Enemy                  
LevelManager            -[#595959,dashed]->  FixedObject            : "«create»"
LevelManager            -[#595959,dashed]->  Player                 : "«create»"
LevelManager            -[#595959,dashed]->  Transform              : "«create»"
MobileObject            -[#000082,plain]-^  GameObject             
ModelTest              "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
Player                  -[#000082,plain]-^  Actor                  
PlayerTest             "1" *-[#595959,plain]-> "player\n1" Player                 
PlayerTest             "1" *-[#595959,plain]-> "transform\n1" Transform              
Snail                   -[#000082,plain]-^  Enemy                  
Star                    -[#000082,plain]-^  Item                   
WorldModel              -[#008200,dashed]-^  ControllableWorldModel 
WorldModel             "1" *-[#595959,plain]-> "controller\n1" Controller             
WorldModel             "1" *-[#595959,plain]-> "objectList\n*" GameObject             
WorldModel             "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldModel             "1" *-[#595959,plain]-> "player\n1" Player                 
WorldModel             "1" *-[#595959,plain]-> "soundHandler\n1" SoundHandler           
WorldModel              -[#008200,dashed]-^  ViewableWorldModel     
WorldModel             "1" *-[#595959,plain]-> "board\n1" WorldBoard             
WorldModel             "1" *-[#595959,plain]-> "worldView\n1" WorldView              
WorldModelTest         "1" *-[#595959,plain]-> "player\n1" Player                 
WorldModelTest         "1" *-[#595959,plain]-> "transform\n1" Transform              
WorldModelTest         "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
WorldView              "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldView              "1" *-[#595959,plain]-> "parallaxBackground\n1" ParallaxBackground     
WorldView              "1" *-[#595959,plain]-> "playerAnimation\n1" PlayerAnimation        
WorldView              "1" *-[#595959,plain]-> "model\n1" ViewableWorldModel     
@enduml
