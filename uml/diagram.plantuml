@startuml

class Actor {
  # Actor(int, int, Transform): 
  # damage: int
  - isAlive: boolean
  - lives: int
   damage: int
   lives: int
   isAlive: boolean
}
class Banana {
  + Banana(Transform): 
   largePlayerSize: Vector2
   bigJumpForce: int
}
class BananaTest {
  + BananaTest(): 
}
class Coin {
  + Coin(Transform): 
  - objectScore: int
   objectScore: int
}
class CoinTest {
  + CoinTest(): 
}
class CollisionBox {
  + CollisionBox(Transform): 
   position: Vector2
}
class CollisionBoxTest {
  + CollisionBoxTest(): 
}
class CollisionHandler {
  + CollisionHandler(int): 
  - ceilingHeight: int
  - ATTACK_COOLDOWN: int
  - BOUNCE_COOLDOWN: int
   ATTACK_COOLDOWN: int
   BOUNCE_COOLDOWN: int
   ceilingHeight: int
}
class CollisionHandlerTest {
  + CollisionHandlerTest(): 
}
interface ControllableWorldModel << interface >> {
   gameState: GameState
   jumping: boolean
   movingRight: boolean
   infoMode: boolean
   movingLeft: boolean
   movementSpeed: int
}
class Controller {
  + Controller(ControllableWorldModel): 
}
class ControllerTest {
  + ControllerTest(): 
}
class Enemy {
  + Enemy(int, int, int, int, Transform): 
  - objectScore: int
   readyToCollide: boolean
   objectScore: int
}
class EnemyFactory {
  + EnemyFactory(): 
}
class EnemyFactoryTest {
  + EnemyFactoryTest(): 
}
class EnemyTest {
  + EnemyTest(): 
}
enum EnemyType << enumeration >> {
  - EnemyType(int, int, int, int, float, float): 
}
class FixedObject {
  + FixedObject(Transform): 
}
class GameObject {
  + GameObject(Transform): 
  - transform: Transform
  - collisionBox: CollisionBox
   collisionBox: CollisionBox
   size: Vector2
   transform: Transform
}
enum GameState << enumeration >> {
  - GameState(): 
}
class Item {
  + Item(Transform): 
}
class ItemFactory {
  + ItemFactory(): 
}
class ItemFactoryTest {
  + ItemFactoryTest(): 
}
class Leopard {
  + Leopard(int, int, int, int, Transform): 
}
class LevelManager {
  + LevelManager(): 
}
class LevelManagerTest {
  + LevelManagerTest(): 
}
class Main {
  + Main(): 
}
class MainTest {
  + MainTest(): 
}
class MobileObject {
  # MobileObject(int, Transform): 
  - movementSpeed: int
  - movementDirection: int
  - verticalVelocity: int
   movementDirection: int
   verticalVelocity: int
   movementSpeed: int
}
class MobileObjectTest {
  + MobileObjectTest(): 
}
interface Movable << interface >>
class Pair<K, V> {
  + Pair(K, V): 
  + first: K
  + second: V
   first: K
   second: V
}
class ParallaxBackground {
  + ParallaxBackground(int): 
}
class ParallaxBackgroundTest {
  + ParallaxBackgroundTest(): 
}
class Player {
  + Player(int, int, Transform): 
  - lastBounceTime: long
  - hasPowerUp: boolean
  - jumpForce: int
  - lastAttackTime: long
   lastBounceTime: long
   respawned: boolean
   hasPowerUp: boolean
   lastAttackTime: long
   jumpForce: int
}
class PlayerAnimation {
  + PlayerAnimation(): 
}
class PlayerAnimationTest {
  + PlayerAnimationTest(): 
}
class PlayerTest {
  ~ PlayerTest(): 
}
interface Scorable << interface >> {
   objectScore: int
}
class Snail {
  + Snail(int, int, int, int, Transform): 
}
class SoundHandler {
  + SoundHandler(): 
}
class SoundHandlerTest {
  + SoundHandlerTest(): 
}
class Star {
  + Star(Transform): 
}
class Transform {
  + Transform(Vector2, Vector2): 
  ~ size: Vector2
   pos: Vector2
   size: Vector2
}
class TransformTest {
  + TransformTest(): 
}
interface ViewableObject << interface >> {
   collisionBox: CollisionBox
   transform: Transform
}
interface ViewableWorldModel << interface >> {
   movementDirection: int
   coinCounter: int
   viewablePlayer: ViewableObject
   objectList: List<ViewableObject>
   infoMode: boolean
   movementSpeed: int
   totalScore: int
   playerLives: int
   gameState: GameState
   boardWidth: int
   countDown: int
   levelWidth: int
}
entity WorldBoard << record >> {
  + WorldBoard(int, int): 
}
class WorldBoardTest {
  ~ WorldBoardTest(): 
}
class WorldModel {
  + WorldModel(int, int): 
  + LEVEL_WIDTH: int
  ~ countDown: int
  ~ isJumping: boolean
  ~ gameState: GameState
  - infoMode: boolean
  ~ isMovingLeft: boolean
  - totalScore: Integer
  ~ objectList: List<GameObject>
  - coinCounter: Integer
  ~ isMovingRight: boolean
   movementDirection: int
   LEVEL_WIDTH: int
   movementSpeed: int
   totalScore: int
   playerLives: int
   countDown: int
   coinCounter: int
   objectList: List<ViewableObject>
   viewablePlayer: ViewableObject
   infoMode: boolean
   isMovingRight: boolean
   touchingGround: boolean
   gameState: GameState
   boardWidth: int
   isMovingLeft: boolean
   isJumping: boolean
}
class WorldModelTest {
  + WorldModelTest(): 
}
class WorldView {
  + WorldView(ViewableWorldModel, int, int): 
  - font: BitmapFont
  - textures: HashMap<String, Texture>
  - parallaxBackground: ParallaxBackground
  - layout: GlyphLayout
  - playerAnimation: PlayerAnimation
  - batch: SpriteBatch
   parallaxBackground: ParallaxBackground
   viewportLeftX: float
   batch: SpriteBatch
   playerAnimation: PlayerAnimation
   font: BitmapFont
   layout: GlyphLayout
   textures: HashMap<String, Texture>
}
class WorldViewTest {
  + WorldViewTest(): 
}
interface node26 as "package-info" << interface >>
interface node33 as "package-info" << interface >>
interface node43 as "package-info" << interface >>

Actor                   -[#000082,plain]-^  MobileObject           
Banana                  -[#000082,plain]-^  Item                   
Coin                    -[#000082,plain]-^  Item                   
Coin                    -[#008200,dashed]-^  Scorable               
CollisionBoxTest       "1" *-[#595959,plain]-> "player\n1" Player                 
CollisionHandler       "1" *-[#595959,plain]-> "soundHandler\n1" SoundHandler           
CollisionHandlerTest   "1" *-[#595959,plain]-> "handler\n1" CollisionHandler       
Controller             "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "controllableModel\n1" ControllableWorldModel 
ControllerTest         "1" *-[#595959,plain]-> "controller\n1" Controller             
Enemy                   -[#000082,plain]-^  Actor                  
Enemy                   -[#008200,dashed]-^  Scorable               
FixedObject             -[#000082,plain]-^  GameObject             
GameObject             "1" *-[#595959,plain]-> "collisionBox\n1" CollisionBox           
GameObject             "1" *-[#595959,plain]-> "transform\n1" Transform              
GameObject              -[#008200,dashed]-^  ViewableObject         
Item                    -[#000082,plain]-^  FixedObject            
Leopard                 -[#000082,plain]-^  Enemy                  
MobileObject            -[#000082,plain]-^  GameObject             
MobileObject            -[#008200,dashed]-^  Movable                
MobileObjectTest       "1" *-[#595959,plain]-> "player\n1" Player                 
MobileObjectTest       "1" *-[#595959,plain]-> "transform\n1" Transform              
ParallaxBackgroundTest "1" *-[#595959,plain]-> "background\n1" ParallaxBackground     
Player                  -[#000082,plain]-^  Actor                  
PlayerTest             "1" *-[#595959,plain]-> "player\n1" Player                 
PlayerTest             "1" *-[#595959,plain]-> "transform\n1" Transform              
Snail                   -[#000082,plain]-^  Enemy                  
Star                    -[#000082,plain]-^  Item                   
TransformTest          "1" *-[#595959,plain]-> "transform\n1" Transform              
WorldModel             "1" *-[#595959,plain]-> "collisionHandler\n1" CollisionHandler       
WorldModel              -[#008200,dashed]-^  ControllableWorldModel 
WorldModel             "1" *-[#595959,plain]-> "controller\n1" Controller             
WorldModel             "1" *-[#595959,plain]-> "objectList\n*" GameObject             
WorldModel             "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldModel             "1" *-[#595959,plain]-> "player\n1" Player                 
WorldModel              -[#008200,dashed]-^  ViewableWorldModel     
WorldModel             "1" *-[#595959,plain]-> "board\n1" WorldBoard             
WorldModel             "1" *-[#595959,plain]-> "worldView\n1" WorldView              
WorldModelTest         "1" *-[#595959,plain]-> "transform\n1" Transform              
WorldModelTest         "1" *-[#595959,plain]-> "worldModel\n1" WorldModel             
WorldView              "1" *-[#595959,plain]-> "gameState\n1" GameState              
WorldView              "1" *-[#595959,plain]-> "parallaxBackground\n1" ParallaxBackground     
WorldView              "1" *-[#595959,plain]-> "playerAnimation\n1" PlayerAnimation        
WorldView              "1" *-[#595959,plain]-> "model\n1" ViewableWorldModel     
WorldViewTest          "1" *-[#595959,plain]-> "mockBackground\n1" ParallaxBackground     
WorldViewTest          "1" *-[#595959,plain]-> "mockPlayer\n1" Player                 
WorldViewTest          "1" *-[#595959,plain]-> "mockPlayerAnimation\n1" PlayerAnimation        
WorldViewTest          "1" *-[#595959,plain]-> "mockTransform\n1" Transform              
WorldViewTest          "1" *-[#595959,plain]-> "mockModel\n1" ViewableWorldModel     
WorldViewTest          "1" *-[#595959,plain]-> "worldView\n1" WorldView              
@enduml
